
import file from './test'

// on std::events::player_join {}

// on std::events::interval!(3) {;;;}

/*fn getAllPlayers(): selector {
	return @a[]
}*/

/*fn testRef(ref lol:int): void {
	lol++
}*/

struct A {/*

	val: int

	test() {}

*/}

struct B implements A {}

//let lol = false

fn x(): int {
	//B()
	//testRef(ref a)
	a += b
	//while (false) /say b
	/*if (!lol) {
		if (true) /say a
		lol = a != b
		/say say whaaat
	} else /say oka
	*/
	//a.abs
	file::a++
	/execute as @a positioned <coords> align x facing entity @s feet run say hello!
	/say hello
	/say hello
	//x()
	file::yr++;
	/say helloo
	return file::a *
		3
}

mod amod {
	let abc = 0;
}

let a = b;
const b = 2;
let yr = 3//y()

let xi: int = 1//x()

fn y(): int {return 1}
