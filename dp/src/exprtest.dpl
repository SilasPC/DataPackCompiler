
// import {xxx} from 'test'

export let a: int = 2
let b: int = 3
// let c: bool = true

    /*************
    * Hiya there *
    *    ()()    *
    *  \(^.^)/   *
    *    ( . )   *
    *     ¨ ¨    *
    * You like.. *
    *  ..coding? *
    * I sure do! *
    *************/

fn reftest(ref num:int): void {
    num += 1
}

fn useRef(): void {
    let local: int = 0
    reftest(ref local)
}

fn x(y:int): int {
    let local: int = a
    x(y)
    // if (a == b) a+=1
    // return 2
	a += y * (b + 1)
    return a - 5
    // some dead code
    a += 1
    // a.abs()
    /say text
    /msg ${y} ${1+2+3}
    a -= 1
}

/*fn part(): void {
    //particle smoke ${a+0} ${b+1} ${c+2}
    //particle smoke ${a,b,c}
    x(1)
}*/

/*
export namespace math {

    fn dif(a:int,b:int): int {
        return (a-b).abs(); // functional approach
    }

    fn isEven(x:int): bool {
        return x % 2 == 0;
    }

    // function overloading
    fn len(a:int,b:int): int {
        return sqrt(a**2+b**2);
    }
    fn len(a:int,b:int,c:int): int {
        return sqrt(a**2+b**2+c**2);
    }

}
*/
