
export let a: int = 2;
let b: int = 3;
// let c: bool = true;

    /**************/
    /* Hiya there */
    /*    ()()    */
    /*  \(^.^)/   */
    /*    ( . )   */
    /*     ¨ ¨    */
    /* You like.. */
    /*  ..coding? */
    /* I sure do! */
    /**************/

fn x(y:int): void {
	//from exprtest
	a += a * (b + 1);
}

fn part(): void {
    //particle smoke ${a+0} ${b+1} ${c+2}
    //particle smoke ${a,b,c}
    x(1);
}

/*

// ideas:

export namespace math {

    fn dif(a:int,b:int): int {
        return (a-b).abs(); // functional approach
    }

    fn isEven(x:int): bool {
        return x % 2 == 0;
    }

    // function overloading
    fn len(a:int,b:int): int {
        return sqrt(a**2+b**2);
    }
    fn len(a:int,b:int,c:int): int {
        return sqrt(a**2+b**2+c**2);
    }

}

*/

fn test(xxx:int): void {
    //say abc
    //let v1: int = 2;
    //if (v1 == 2) {
    //    let v2: int = 3;
    //    /tellraw @s "Hello"
    //} else {}
    //let v3: int = 4;
    //let v2: int = 0;
    //debug(v3);
}

// e=a*b+c*d
// 
// t1 = a
// t1 *= b
// t2 = c
// t2 *= d
// t1 += t2
// e = t1
// 
